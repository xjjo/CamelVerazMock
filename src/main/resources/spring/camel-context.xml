<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">

  <!-- Spring configuration  -->
  	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
		<property name="url" value="jdbc:hsqldb:file:database.dat;shutdown=true"/>
		<property name="username" value="sa"/>
		<property name="password" value=""/>
	</bean>
	
	<jdbc:initialize-database data-source="dataSource" enabled="true">
		<jdbc:script location="classpath:scripts/db-schema.sql" />
	</jdbc:initialize-database>

	<!-- bean for camel component sql:{{}} not used yet  -->
	<bean id="sqlComponent" class="org.apache.camel.component.sql.SqlComponent">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- spring template  -->
	<bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
  <!-- You could also define a traditional camel context here -->
  
 	<bean id="propertyHandler" class="veraz_cfx_service_mock.org.util.GetPropertyJDBCHelper" />
  	<bean id="verazHandler" class="veraz_cfx_service_mock.org.VerazResponseHandlerBean" />
	<camelContext xmlns="http://camel.apache.org/schema/spring">
	
	       	<propertyPlaceholder id="placeholder" location="classpath:sql.properties" />
	       
	        <route id="main_rout" streamCache="true">
	            <from uri="cxf:bean:simpleServiceEndpoint?dataFormat=MESSAGE"/>
	           
	             <setHeader headerName="x_to_web_service">
			     	<simple>true</simple>
			     </setHeader>
			   				
	            <camel:choice>
	            	<camel:when>
	            		<camel:simple>${headers.x_to_web_service} == 'true'</camel:simple>
	            		<to uri="direct:VerazWebService"/>
	            	</camel:when>
	            	<camel:otherwise>
			           	<to uri="direct:MockVerazWebService"/>
	            	</camel:otherwise>	            	
	            </camel:choice>
	            
	            <log message=">>> ${body}"/>
	        </route>
	        
	        <route id="to_veraz_WebService">
	        	<from uri="direct:VerazWebService"/>
	        	
	        	<setHeader headerName="endpoint">
	        			<!-- load veraz endpoint to a header-->
				        <method bean="propertyHandler" method="perform('endpoint_veraz')" />     
				</setHeader>
         		
         		<log message="Request Action: ${headers.SOAPAction}"/>
         		<log message="Request endpoint: ${header.endpoint}"/>         		 
         		<recipientList>
				  <simple>cxf:bean:callRealWebService?address=${header.endpoint}&amp;dataFormat=MESSAGE</simple>
				</recipientList>
	        </route>
	        
	        <route id="rout_to_veraz_Mock">
	        	<from uri="direct:MockVerazWebService"/>
	        	 <camel:choice>
	            	<camel:when>
	            		<camel:simple>${headers.SOAPAction} != '"urn:mensajeRequest"'</camel:simple>
	            		<camel:setBody>
	            			<simple>"Not soported operation"</simple>
	            		</camel:setBody>
	            	</camel:when>
	            	<camel:otherwise>
			         	 <bean ref="verazHandler" method="mensajeRequest" />
			         	 <log message="${headers.xRequest}"/>
	            	</camel:otherwise>	            	
	            </camel:choice>
	        </route>
	    </camelContext>
	    	    
	    <cxf:cxfEndpoint id="simpleServiceEndpoint"  address="/idvalidator" wsdlURL="classpath:wsdl/idvalidator.wsdl"/>
	    <cxf:cxfEndpoint
       		address="http://localhost:8088/mockidvalidatorSoap11Binding"
	        endpointName="idvalidatorHttpsSoap11Endpoint"
	        id="callRealWebService" wsdlURL="classpath:wsdl/idvalidator.wsdl"/>
</beans>
<!-- 
<recipientList>
  <simple>cxf:bean:cxfEndpoint?address=${header.computed_address}&amp;serviceClass=one.of.my.Services&amp;serviceName=...&amp;endpointName=...</simple>
</recipientList>
https://camel.apache.org/manual/latest/faq/how-to-use-a-dynamic-uri-in-to.html
 -->




<!--
 <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">     
   <route id="simple-route">
     <from id="route-timer" uri="timer:foo?period=2000"/>
     <transform id="route-transform">
       <method ref="myTransformer"/>
     </transform>
     <log id="route-log" message=">>> ${body}"/>
   </route>
  </camelContext>
    -->
   
  <!-- 
    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <route>
            <from uri="cxf:bean:simpleServiceEndpoint?dataFormat=MESSAGE"/>
            <log message=">>> ${body}"/>
            <setHeader headerName="randomResponse">
                <simple>random(1,6)</simple>
            </setHeader>
              <setHeader headerName="x_body">
                <simple>${body}</simple>
            </setHeader>
            <setBody>
                <groovy>this.getClass().getResource( "/response/response${request.headers.randomResponse}.xml" ).text</groovy>
            </setBody>
            <log message=">>> ${body}"/>
        </route>
    </camelContext>
    <cxf:cxfEndpoint id="simpleServiceEndpoint" address="/simpleService" wsdlURL="classpath:wsdl/simpleService.wsdl" />
 	-->